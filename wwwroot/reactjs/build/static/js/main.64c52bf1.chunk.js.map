{"version":3,"sources":["components/calendar/Day.jsx","components/calendar/Calendar.jsx","App.js","serviceWorker.js","index.js"],"names":["Day","props","context","handleShow","bind","handleClose","handleEndTimeChange","handleStartTimeChange","generateAvailableTimesListDivs","state","startTime","oldStartTime","endTime","oldEndTime","show","day","date","split","style","isToday","backgroundColor","setTimeout","availableTimesListDivs","i","this","availableTimesList","length","push","key","starttime","className","startTimeList","endTimeList","endtime","event","setState","target","value","id","updateAvailableTime","index","selectedMonth","onClick","Modal","onHide","cancelInput","Header","closeButton","Title","Body","type","onChange","Footer","Button","variant","updateDay","Component","month","Array","daysInMonth","year","Date","getDate","Calendar","prevMonth","nextMonth","generateCalendarDates","generateCalendarDisplay","getUrlVars","today","firstDayOfMonth","getFullYear","getMonth","TestData","data","console","log","dayObjectArray","submitAvailableTimes","sendAvailableTimes","calendarDisplay","calendarDescription","calendarId","fetchAvailableTimesList","fetch","response","json","description","vars","window","location","href","replace","m","x","lastMonth","lastMonthYear","daysInLastMonth","daysInCurrentMonth","firstWeekDay","getDay","lastMonthDisplayDays","map","availableTime","ymd","d","setHours","monthNumber","outside","number","getTime","oldDate","method","headers","Headers","body","status","dayObject","found","newAvailableTimesList","newDayObjectArray","updateAvailableTimesList","postAvailableTimes","size","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.64c52bf1.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Modal, Button } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\n/**\n * AddAvailabelTime:\n *  component that allows selecting specific time and adding it.\n */\nclass Day extends Component {\n  static getDerivedStateFromProps(props, state) {\n    if (\n      props.date !== state.date ||\n      props.availableTimesList !== state.availableTimesList\n    ) {\n      if (props.availableTimesList.length < 1) {\n        return {\n          startTime: '',\n          endTime: '',\n          date: props.date,\n          availableTimesList: props.availableTimesList\n        };\n      }\n      var startTimeList = props.availableTimesList[0].starttime\n        .split(' ')[1]\n        .split(':');\n      //extract the hour and minute (drop the seconds)\n      var startTime = startTimeList[0] + ':' + startTimeList[1];\n      var endTimeList = props.availableTimesList[0].endtime\n        .split(' ')[1]\n        .split(':');\n      var endTime = endTimeList[0] + ':' + endTimeList[1];\n      return {\n        startTime: startTime,\n        endTime: endTime,\n        oldStartTime: startTime,\n        oldEndTime: endTime,\n        date: props.date,\n        availableTimesList: props.availableTimesList\n      };\n    }\n    return state;\n  }\n\n  generateAvailableTimesListDivs() {\n    let availableTimesListDivs = [];\n    for (var i = 0; i < this.props.availableTimesList.length; ++i) {\n      if (i === 2) {\n        availableTimesListDivs.push(\n          <div\n            key={this.props.availableTimesList[i].starttime}\n            className=\"text-center\"\n          >\n            ...\n          </div>\n        );\n        break;\n      } else {\n        var startTimeList = this.props.availableTimesList[i].starttime\n          .split(' ')[1]\n          .split(':');\n        //extract the hour and minute (drop the seconds)\n        var startTime = startTimeList[0] + ':' + startTimeList[1];\n        var endTimeList = this.props.availableTimesList[i].endtime\n          .split(' ')[1]\n          .split(':');\n        var endTime = endTimeList[0] + ':' + endTimeList[1];\n        availableTimesListDivs.push(\n          <div\n            key={this.props.availableTimesList[i].starttime}\n            className={this.props.availableTimesList[i].className}\n          >\n            {startTime} -- {endTime}\n          </div>\n        );\n      }\n    }\n    return (\n      <>\n        {this.props.date.split('-')[2]}\n        {availableTimesListDivs}\n      </>\n    );\n  }\n\n  constructor(props, context) {\n    super(props, context);\n    this.handleShow = this.handleShow.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n    this.handleEndTimeChange = this.handleEndTimeChange.bind(this);\n    this.handleStartTimeChange = this.handleStartTimeChange.bind(this);\n    this.generateAvailableTimesListDivs = this.generateAvailableTimesListDivs.bind(\n      this\n    );\n    this.state = {\n      startTime: '',\n      oldStartTime: '',\n      endTime: '',\n      oldEndTime: '',\n      show: false,\n      day: props.date.split('-')[2],\n      style: this.props.isToday ? { backgroundColor: '#EAEAEA' } : {}\n    };\n    setTimeout(() => {\n      this.generateAvailableTimesListDivs();\n    }, 200);\n  }\n  handleStartTimeChange(event) {\n    this.setState({ startTime: event.target.value });\n  }\n  handleEndTimeChange(event) {\n    this.setState({ endTime: event.target.value });\n  }\n  updateDay() {\n    if (this.state.startTime && this.state.endTime) {\n      var id = -1;\n      if (this.props.availableTimesList.length > 0) {\n        id = this.props.availableTimesList[0].id;\n      }\n      this.props.updateAvailableTime(\n        this.props.index,\n        id,\n        this.state.startTime,\n        this.state.endTime\n      );\n      /*\n      this.props.updateColor(this.props.index, 'event bg-primary');\n      this.setState({\n        sendAvailableClassName: 'event bg-primary'\n      });\n      */\n      //Add Timeout so parent updates sendAvailableClassName\n      /*\n      setTimeout(() => {\n        this.generateAvailableTimesListDivs();\n      }, 200);\n      */\n    }\n  }\n  cancelInput() {\n    //use timeout so the user does not see the number flicker\n    setTimeout(() => {\n      this.setState({\n        startTime: this.state.oldStartTime,\n        endTime: this.state.oldEndTime\n      });\n    }, 500);\n  }\n  handleClose() {\n    this.setState({ show: false });\n  }\n\n  handleShow() {\n    this.setState({ show: true });\n  }\n  render() {\n    return (\n      <>\n        <li\n          className={this.props.selectedMonth ? 'outside' : 'inside'}\n          style={this.props.isToday ? { backgroundColor: '#EAEAEA' } : {}}\n          key={this.props.date}\n          onClick={this.handleShow}\n        >\n          <div className=\"date\">{this.generateAvailableTimesListDivs()}</div>\n        </li>\n        <Modal\n          show={this.state.show}\n          onHide={() => {\n            this.handleClose();\n            this.cancelInput();\n          }}\n        >\n          <Modal.Header closeButton>\n            <Modal.Title id=\"modalTitle\">\n              {this.props.date} {this.state.date}\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <h3>Add Available Time</h3>\n            <p>\n              Start Time:&nbsp;\n              <input\n                type=\"text\"\n                key={'start' + this.props.date}\n                value={this.state.startTime}\n                onChange={this.handleStartTimeChange}\n              ></input>\n            </p>\n            <p>\n              &nbsp;End Time:&nbsp;\n              <input\n                type=\"text\"\n                key={'end' + this.props.date}\n                value={this.state.endTime}\n                onChange={this.handleEndTimeChange}\n              ></input>\n            </p>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button\n              variant=\"secondary\"\n              onClick={() => {\n                this.handleClose();\n                this.cancelInput();\n              }}\n            >\n              Close\n            </Button>\n            <Button\n              variant=\"primary\"\n              onClick={() => {\n                this.handleClose();\n                this.updateDay();\n              }}\n            >\n              Add Available\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      </>\n    );\n  }\n}\n\n/*\nDay.propTypes = {\n  day: PropTypes.number,\n  year: PropTypes.number,\n  className: PropTypes.string,\n  month: PropTypes.string\n};\n*/\n\nexport default Day;\n","import React, { Component } from 'react';\nimport TestData from './data/AvailableTimeTestData0';\nimport Day from './Day';\nimport { Button } from 'react-bootstrap';\n\nimport PropTypes from 'prop-types';\n\nvar month = new Array(11);\nmonth[0] = 'Jan';\nmonth[1] = 'Feb';\nmonth[2] = 'Mar';\nmonth[3] = 'Apr';\nmonth[4] = 'May';\nmonth[5] = 'June';\nmonth[6] = 'July';\nmonth[7] = 'Aug';\nmonth[8] = 'Sept';\nmonth[9] = 'Oct';\nmonth[10] = 'Nov';\nmonth[11] = 'Dec';\n\nfunction daysInMonth(month, year) {\n  return new Date(year, month, 0).getDate();\n}\n/**\n * Calendar:\n *    Generates the calendar for the current month\n */\nclass Calendar extends Component {\n  constructor(props, context) {\n    super(props, context);\n    this.prevMonth = this.prevMonth.bind(this);\n    this.nextMonth = this.nextMonth.bind(this);\n    this.generateCalendarDates = this.generateCalendarDates.bind(this);\n    this.generateCalendarDisplay = this.generateCalendarDisplay.bind(this);\n    this.updateAvailableTime = this.updateAvailableTime.bind(this);\n    this.getUrlVars = this.getUrlVars.bind(this);\n    var today = new Date();\n    var firstDayOfMonth = new Date(today.getFullYear(), today.getMonth(), '1');\n    var availableTimesList = TestData.data;\n    var calendarDescription = 'Calendar 1';\n    console.log('construct calendar');\n    this.state = {\n      firstDayOfMonth: firstDayOfMonth,\n      availableTimesList: availableTimesList\n    };\n    var dayObjectArray = this.generateCalendarDates();\n    //console.log(dayObjectArray);\n    this.state = {\n      submitAvailableTimes: this.props.sendAvailableTimes,\n      dayObjectArray: dayObjectArray,\n      firstDayOfMonth: firstDayOfMonth\n    };\n    var calendarDisplay = this.generateCalendarDisplay();\n    this.state = {\n      submitAvailableTimes: this.props.sendAvailableTimes,\n      dayObjectArray: dayObjectArray,\n      firstDayOfMonth: firstDayOfMonth,\n      calendarDisplay: calendarDisplay,\n      availableTimesList: availableTimesList,\n      calendarDescription: calendarDescription\n    };\n    var calendarId = this.getUrlVars()['calendarId'];\n    if (typeof calendarId !== 'undefined' && calendarId !== null) {\n      this.fetchAvailableTimesList();\n    }\n  }\n\n  async fetchAvailableTimesList() {\n    var calendarId = this.getUrlVars()['calendarId'];\n    console.log('calendarId=' + calendarId);\n    const response = await fetch(\n      '/Calendar/AvailableTimesJSON?calendarId=' + calendarId\n    );\n    const data = await response.json();\n    console.log(data);\n    this.setState({\n      availableTimesList: data.data,\n      calendarDescription: data.description,\n      calendarId: calendarId\n    });\n    setTimeout(() => {\n      var dayObjectArray = this.generateCalendarDates();\n      this.setState({\n        dayObjectArray: dayObjectArray\n      });\n    }, 200);\n    setTimeout(() => {\n      var calendarDisplay = this.generateCalendarDisplay();\n      this.setState({\n        calendarDisplay: calendarDisplay\n      });\n    }, 200);\n  }\n\n  getUrlVars() {\n    var vars = {};\n    window.location.href.replace(/[?&]+([^=&]+)=([^&]*)/gi, function(\n      m,\n      key,\n      value\n    ) {\n      vars[key] = value;\n    });\n    return vars;\n  }\n\n  generateCalendarDisplay() {\n    console.log('gen cal');\n    let calendarDisplay = [];\n    for (var x = 0; x < this.state.dayObjectArray.length; ++x) {\n      calendarDisplay.push(\n        <Day\n          key={x}\n          index={x}\n          date={this.state.dayObjectArray[x].date}\n          selectedMonth={this.state.dayObjectArray[x].selectedMonth}\n          isToday={this.state.dayObjectArray[x].isToday}\n          availableTimesList={this.state.dayObjectArray[x].availableTimesList}\n          updateAvailableTime={this.updateAvailableTime.bind(this)}\n        ></Day>\n      );\n    }\n    return calendarDisplay;\n  }\n\n  generateCalendarDates() {\n    var lastMonth = this.state.firstDayOfMonth.getMonth();\n    var lastMonthYear = this.state.firstDayOfMonth.getFullYear();\n    //fixes when we are on the first month\n    if (lastMonth < 1) {\n      lastMonth = 12;\n      lastMonthYear = lastMonthYear - 1;\n    }\n\n    var daysInLastMonth = daysInMonth(lastMonth, lastMonthYear);\n    var daysInCurrentMonth = daysInMonth(\n      this.state.firstDayOfMonth.getMonth() + 1,\n      this.state.firstDayOfMonth.getFullYear()\n    );\n    var firstWeekDay = this.state.firstDayOfMonth.getDay();\n    var lastMonthDisplayDays = daysInLastMonth - firstWeekDay;\n    var availableTimesList = this.state.availableTimesList;\n    availableTimesList.map((availableTime, index) => {\n      if (typeof availableTime.date === 'undefined') {\n        var ymd = availableTime.starttime.split('-');\n        var d = ymd[2].split(' ')[0];\n        availableTime.date = ymd[0] + '-' + ymd[1] + '-' + d;\n      }\n      if (typeof availableTime.className === 'undefined') {\n        availableTime.className = 'event bg-info';\n      }\n      return null;\n    });\n    //42 days to give us 6 weeks\n    var today = new Date();\n    today.setHours(0, 0, 0, 0);\n    var dayObjectArray = new Array(42);\n    for (var i = 0; i < 42; ++i) {\n      var monthNumber = this.state.firstDayOfMonth.getMonth();\n      var year = this.state.firstDayOfMonth.getFullYear();\n      var outside = false;\n      var number = 0;\n      var isToday = false;\n      //Find number to display on calendar and which month it is from\n      if (lastMonthDisplayDays + i < daysInLastMonth) {\n        monthNumber = monthNumber - 1 < 0 ? 11 : monthNumber - 1;\n        year = monthNumber === 11 ? year - 1 : year;\n        //previous month\n        outside = true;\n        number = lastMonthDisplayDays + i + 1;\n        if (new Date(year, monthNumber, number).getTime() === today.getTime()) {\n          isToday = true;\n        }\n      } else if (i - firstWeekDay + 1 <= daysInCurrentMonth) {\n        //current month\n        number = i - firstWeekDay + 1;\n        if (new Date(year, monthNumber, number).getTime() === today.getTime()) {\n          isToday = true;\n        }\n      } else {\n        monthNumber = monthNumber + 1 > 11 ? 0 : monthNumber + 1;\n        year = monthNumber === 0 ? year + 1 : year;\n        //next month\n        number = i - firstWeekDay - daysInCurrentMonth + 1;\n        outside = true;\n        if (new Date(year, monthNumber, number).getTime() === today.getTime()) {\n          isToday = true;\n        }\n      }\n      const day = number;\n      const index = i;\n      let date = year + '-';\n      if (monthNumber < 10) {\n        date += '0';\n      }\n      date += monthNumber + 1 + '-';\n      if (day < 10) {\n        date += '0';\n      }\n      date += day;\n      dayObjectArray[index] = {};\n      dayObjectArray[index].selectedMonth = outside;\n      dayObjectArray[index].date = date;\n      dayObjectArray[index].isToday = isToday;\n      dayObjectArray[index].availableTimesList = [];\n      availableTimesList.map((availableTime, i) => {\n        if (date === availableTime.date) {\n          dayObjectArray[index].availableTimesList.push(availableTime);\n        }\n        return null;\n      });\n    }\n    return dayObjectArray;\n  }\n\n  prevMonth() {\n    var oldDate = this.state.firstDayOfMonth;\n    var date = new Date(oldDate.getFullYear(), oldDate.getMonth() - 1, '1');\n    console.log(oldDate);\n    console.log(date);\n    this.setState({\n      firstDayOfMonth: date\n    });\n    setTimeout(() => {\n      var dayObjectArray = this.generateCalendarDates();\n      this.setState({\n        dayObjectArray: dayObjectArray\n      });\n    }, 200);\n    setTimeout(() => {\n      var calendarDisplay = this.generateCalendarDisplay();\n      this.setState({\n        calendarDisplay: calendarDisplay\n      });\n    }, 200);\n  }\n  nextMonth() {\n    var oldDate = this.state.firstDayOfMonth;\n    var date = new Date(oldDate.getFullYear(), oldDate.getMonth() + 1, '1');\n    console.log(oldDate);\n    console.log(date);\n    this.setState({\n      firstDayOfMonth: date\n    });\n    setTimeout(() => {\n      var dayObjectArray = this.generateCalendarDates();\n      this.setState({\n        dayObjectArray: dayObjectArray\n      });\n    }, 200);\n    setTimeout(() => {\n      var calendarDisplay = this.generateCalendarDisplay();\n      this.setState({\n        calendarDisplay: calendarDisplay\n      });\n    }, 200);\n  }\n\n  async postAvailableTimes() {\n    var availableTimesList = this.state.availableTimesList;\n    for (var i = 0; i < availableTimesList.length; ++i) {\n      if (availableTimesList[i].className === 'event bg-primary') {\n        const response = await fetch('/Calendar/UpdateAvailableTimeJSON', {\n          method: 'POST',\n          headers: new Headers({\n            'Content-Type': 'application/x-www-form-urlencoded' // <-- Specifying the Content-Type\n          }),\n          body:\n            'Calendarid=' +\n            this.state.calendarId +\n            '&Starttime=' +\n            availableTimesList[i].starttime +\n            '&Endtime=' +\n            availableTimesList[i].endtime +\n            '&Id=' +\n            availableTimesList[i].id\n        });\n        const data = await response.json();\n        console.log(data);\n        if (data.status === 'success') {\n          availableTimesList[i].id = data.data.id;\n          availableTimesList[i].className = 'event bg-info';\n        } else {\n          availableTimesList[i].className = 'event bg-danger';\n        }\n      }\n    }\n    this.setState({\n      availableTimesList: availableTimesList\n    });\n  }\n\n  updateAvailableTime(index, id, startTime, endTime) {\n    var dayObject = this.state.dayObjectArray[index];\n    var found = false;\n    for (var i = 0; i < dayObject.availableTimesList.length; ++i) {\n      if (dayObject.availableTimesList[i].id === id) {\n        found = true;\n        dayObject.availableTimesList[i].className = 'event bg-primary';\n        dayObject.availableTimesList[i].starttime =\n          dayObject.date + ' ' + startTime + ':00';\n        dayObject.availableTimesList[i].endtime =\n          dayObject.date + ' ' + endTime + ':00';\n        var updateAvailableTime = dayObject.availableTimesList[i];\n        var availableTimesList = this.state.availableTimesList;\n        for (var x = 0; x < availableTimesList.length; ++x) {\n          if (availableTimesList[x].id === updateAvailableTime.id) {\n            availableTimesList[x] = updateAvailableTime;\n            this.setState({\n              availableTimesList: availableTimesList\n            });\n            return;\n          }\n        }\n      }\n    }\n    if (found === false) {\n      console.log('found false');\n      var availableTime = {};\n      availableTime.id = -1;\n      availableTime.className = 'event bg-primary';\n      availableTime.date = dayObject.date;\n      availableTime.starttime = dayObject.date + ' ' + startTime + ':00';\n      availableTime.endtime = dayObject.date + ' ' + endTime + ':00';\n      console.log('old list: ' + dayObject.availableTimesList);\n      console.log('availTime: ' + availableTime);\n      const newAvailableTimesList = [\n        ...dayObject.availableTimesList,\n        availableTime\n      ];\n      console.log('new avail list: ' + newAvailableTimesList);\n      dayObject.availableTimesList = newAvailableTimesList;\n      const newDayObjectArray = this.state.dayObjectArray;\n      newDayObjectArray[index] = dayObject;\n      const updateAvailableTimesList = [\n        ...this.state.availableTimesList,\n        availableTime\n      ];\n      this.setState({\n        availableTimesList: updateAvailableTimesList,\n        dayObjectArray: newDayObjectArray\n      });\n      console.log(\n        'new length: ' +\n          this.state.dayObjectArray[index].availableTimesList.length\n      );\n      //this.state.dayObjectArray[index] = dayObject;\n      //dayObject.availableTimesList.push(availableTime);\n    }\n    /*\n    this.setState({\n      dayObjectArray: this.state.dayObjectArray\n    });\n    */\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"container py-5\">\n          <div className=\"calendar shadow bg-white p-5\">\n            <h2 className=\"month font-weight-bold mb-0 text-uppercase text-center\">\n              <i className=\"fa fa-calendar fa-1x mr-3\"></i>\n              {this.state.calendarDescription}\n            </h2>\n            <h2\n              id=\"Month\"\n              className=\"month font-weight-bold mb-0 text-uppercase text-center\"\n            >\n              <i\n                className=\"fa fa-chevron-left fa-1x mr-5\"\n                onClick={this.prevMonth}\n              ></i>\n              {month[this.state.firstDayOfMonth.getMonth()]}{' '}\n              {this.state.firstDayOfMonth.getFullYear()}\n              <i\n                className=\"fa fa-chevron-right fa-1x ml-5\"\n                onClick={this.nextMonth}\n              ></i>\n            </h2>\n            <br></br>\n            <ol className=\"day-names list-unstyled\">\n              <li key=\"sun\" className=\"font-weight-bold text-uppercase\">\n                Sun\n              </li>\n              <li key=\"mon\" className=\"font-weight-bold text-uppercase\">\n                Mon\n              </li>\n              <li key=\"tue\" className=\"font-weight-bold text-uppercase\">\n                Tue\n              </li>\n              <li key=\"wed\" className=\"font-weight-bold text-uppercase\">\n                Wed\n              </li>\n              <li key=\"thu\" className=\"font-weight-bold text-uppercase\">\n                Thu\n              </li>\n              <li key=\"fri\" className=\"font-weight-bold text-uppercase\">\n                Fri\n              </li>\n              <li key=\"sat\" className=\"font-weight-bold text-uppercase\">\n                Sat\n              </li>\n            </ol>\n            <ol id=\"days\" className=\"days list-unstyled\">\n              {this.generateCalendarDisplay()}\n              <div className=\"text-center\">\n                <Button\n                  onClick={this.postAvailableTimes.bind(this)}\n                  variant=\"primary\"\n                  size=\"lg\"\n                >\n                  Submit\n                </Button>\n              </div>\n            </ol>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nCalendar.propTypes = {\n  sendAvailableTimes: PropTypes.bool\n};\nexport default Calendar;\n","import React, { Component } from 'react';\nimport Calendar from './components/calendar/Calendar';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\n//function App() {\nclass App extends Component {\n  render() {\n    return (\n      <Calendar />\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}